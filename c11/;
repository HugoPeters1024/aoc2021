use std::{io::{self, BufRead}, fmt::Display, str::FromStr, error::Error};
use std::collections::VecDeque;


struct Level {
    data: Vec<u8>,
    width : usize,
    height: usize,
}

fn main() {
    let stdin = io::stdin();
    let lines: Vec<Vec<u8>> = stdin.lock().lines().flatten().map(|v| v.bytes().collect()).collect();

    let w = lines[0].len();
    let h = lines.len();

    let mut level = Level {
        data: vec![0; w*h],
        width: w,
        height: h,
    };

    for y in 0..h {
        for x in 0..w {
            level.data[y*w+x] = lines[y][x] - 0x30;
        }
    }

    let mut total = 0;
    for i in 0..100 {
        total += step(&mut level);
    }

    println!("{}", total);
}

fn step(level: &mut Level) -> i32 {
    let mut to_flash : VecDeque<(usize, usize)>= VecDeque::new();
    let mut count_flash = 0;
    for y in 0..level.height {
        for x in 0..level.width {
            level.data[y*level.width+x] += 1;
            if level.data[y*level.width+x] > 9 {
                to_flash.push_back((x,y));
            }
        }
    }

    while !to_flash.is_empty() {
        let (x, y) = to_flash.pop_back().unwrap();
        if let Some(v) = try_fetch(level, x, y) {
            if v > 9 {
                count_flash += 1;
                level.data[y*level.width+x] = 0;
                to_flash.push_back(((x+1), (y)));
                to_flash.push_back(((x+1), (y+1)));
                to_flash.push_back(((x), (y+1)));
                to_flash.push_back(((x-1), (y+1)));
                to_flash.push_back(((x-1), (y)));
                to_flash.push_back(((x-1), (y-1)));
                to_flash.push_back(((x), (y-1)));
                to_flash.push_back(((x+1), (y-1)));
            }

        }
    }

    count_flash
}

fn neightbours(level: &Level, x: usize, y: usize) -> Vec<u8> {
    vec!(try_fetch(level, x+1, y),
         try_fetch(level, x+1, y+1),
         try_fetch(level, x, y+1),
         if x > 0 { try_fetch(level, x-1, y+1) } else { None },
         if x > 0 { try_fetch(level, x-1, y) } else { None },
         if x > 0 && y > 0 { try_fetch(level, x-1, y-1) } else { None },
         if y > 0 { try_fetch(level, x, y-1) } else { None},
         if y > 0 { try_fetch(level, x+1, y-1) } else { None }).iter().filter_map(|v| *v).collect()

}

fn try_fetch(level: &Level, x : usize, y: usize) -> Option<u8> {
    if x < level.width && y < level.height {
        Some(level.data[y*level.width+x])
    } else {
        None
    }
}
